{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Import Library","metadata":{"_uuid":"b0c00243-c26c-40d0-a6d9-7b8a20817ef0","_cell_guid":"260b4339-6351-4c07-b733-c2e219ae7b6d","trusted":true}},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport matplotlib.pyplot as plt\nfrom math import sqrt\nfrom scipy.stats import norm\n\nN = norm.cdf","metadata":{"_uuid":"e0f3fee2-a7ac-4f90-a956-6609aed2c37d","_cell_guid":"2131ed38-6637-48b3-95ce-5f211df0b23d","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2022-09-04T16:22:45.626843Z","iopub.execute_input":"2022-09-04T16:22:45.627182Z","iopub.status.idle":"2022-09-04T16:22:47.221588Z","shell.execute_reply.started":"2022-09-04T16:22:45.627156Z","shell.execute_reply":"2022-09-04T16:22:47.220050Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# **General Option Class**","metadata":{"_uuid":"6825c9b1-cacd-4c2d-b6e6-685c12f2ba32","_cell_guid":"85998005-eb73-4c3f-9363-fd7fadd52b22","trusted":true}},{"cell_type":"code","source":"class Option:\n\n    def __init__(self, spot: float, strike: float, maturity: float, risk_free_rate: float, dividend: float,\n                 volatility: float, option_type: str, side: str):\n        self.spot = spot\n        self.strike = strike\n        self.mat = maturity\n        self.rate = risk_free_rate\n        self.div = dividend\n        self.vol = volatility\n        self.type = option_type\n        self.side = side","metadata":{"_uuid":"ef9783db-8eb0-4303-bad0-af1a06243475","_cell_guid":"0d1fa7c2-90dc-4107-8409-977f4592ed28","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2022-09-04T16:22:47.224351Z","iopub.execute_input":"2022-09-04T16:22:47.224775Z","iopub.status.idle":"2022-09-04T16:22:47.230802Z","shell.execute_reply.started":"2022-09-04T16:22:47.224741Z","shell.execute_reply":"2022-09-04T16:22:47.229822Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Option Pricing with Black-Scholes Model","metadata":{"_uuid":"2036d32f-b605-4d5e-8b4c-916942c636f8","_cell_guid":"faa733af-2cc8-4397-8bfd-d7ed2b122f95","trusted":true}},{"cell_type":"markdown","source":"**Assumption from Black-Scholes Model:**\n* No dividends are paid out during the life of the option\n* Markets are random \n* No transaction costs when buying the option\n* Risk-Free Rate and volatility of underlying asset are known and constant\n* Returns of underlying asset are normally distributed\n* Option is European","metadata":{"_uuid":"677ad93f-c4a7-4101-976f-7b3ea685253b","_cell_guid":"93b0a3b4-160f-45df-a306-bf92e1fffa89","trusted":true}},{"cell_type":"code","source":"class BS_Option_Pricing(Option):\n\n    def __init__(self, spot, strike, maturity, rate, vol, option_type, side, dividend: float = None):\n        Option.__init__(self, spot, strike, maturity, rate, dividend, vol, option_type, side)\n\n    def d1(self, add_vol: int = None):\n        vol = add_vol if add_vol else self.vol\n        return (np.log((np.exp(-self.div * self.mat) if self.div else 1) * self.spot / self.strike)\n                + (self.rate + vol ** 2 / 2) * self.mat) / (vol * np.sqrt(self.mat))\n\n    def d2(self, add_vol: int = None):\n        vol = add_vol if add_vol else self.vol\n        return self.d1() - vol * np.sqrt(self.mat)\n\n    def call_price(self, add_vol: int = None):\n        return self.spot * norm.cdf(self.d1(add_vol)) * (np.exp(- self.div * self.mat) if self.div else 1) - \\\n               self.strike * np.exp(-self.rate * self.mat) * norm.cdf(self.d2(add_vol))\n\n    def put_price(self, add_vol: int = None):\n        return self.strike * np.exp(-self.rate * self.mat) * norm.cdf(-self.d2(add_vol)) - self.spot * norm.cdf(\n            -self.d1(add_vol) * (np.exp(- self.div * self.mat) if self.div else 1))\n\n    def call_implied_vol(self, target_price: int, tol: int = .001):\n        sigma = tol\n        while sigma < 1:\n            temp_price = self.call_price(sigma)\n            if abs(target_price - temp_price) < tol:\n                return sigma\n            else:\n                sigma += tol\n        return \"Error when solving!\"\n\n    def put_implied_vol(self, target_price: int, tol: int = .001):\n        sigma = tol\n        while sigma < 1:\n            temp_price = self.put_price(sigma)\n            if abs(target_price - temp_price) < tol:\n                return sigma\n            else:\n                sigma += tol\n        return \"Error when solving!\"","metadata":{"_uuid":"d9840348-7186-4853-a2ae-1f1e1bc4f05b","_cell_guid":"8609aec1-b6a5-4d16-8b0f-e2d12f9247ee","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2022-09-04T16:22:47.232141Z","iopub.execute_input":"2022-09-04T16:22:47.232631Z","iopub.status.idle":"2022-09-04T16:22:47.255631Z","shell.execute_reply.started":"2022-09-04T16:22:47.232596Z","shell.execute_reply":"2022-09-04T16:22:47.254499Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Greek from Option Study","metadata":{"_uuid":"9882e32e-384d-4566-8555-36af113acf1c","_cell_guid":"ba8dbe84-ff7e-4d8c-b0cf-f35c832b9c7e","trusted":true}},{"cell_type":"code","source":"class Greek(BS_Option_Pricing):\n\n    def __init__(self, spot, strike, maturity, rate, vol, option_type, side, dividend: float = None):\n        BS_Option_Pricing.__init__(self, spot, strike, maturity, rate, vol, option_type, side, dividend)\n\n    def call_delta(self):\n        return norm.cdf(self.d1())\n\n    def put_delta(self):\n        return -norm.cdf(-self.d1())\n\n    def call_gamma(self):\n        return norm.pdf(self.d1()) / (self.spot * self.vol * sqrt(self.mat))\n\n    def put_gamma(self):\n        return self.call_gamma()\n\n    def call_vega(self):\n        return self.spot * np.sqrt(self.mat) * norm.pdf(self.d1())\n\n    def put_vega(self):\n        return self.call_vega()\n\n    def call_theta(self):\n        return - ((self.spot * norm.pdf(self.d1()) * self.vol) / (\n                2 * self.mat)) - self.rate * self.strike * np.exp(\n            - self.rate * self.mat) * norm.cdf(self.d2())\n\n    def put_theta(self):\n        return - ((self.spot * norm.pdf(self.d1()) * self.vol) / (\n                2 * self.mat)) + self.rate * self.strike * np.exp(\n            - self.rate * self.mat) * norm.cdf(self.d2())\n\n    def call_rho(self):\n        return self.strike * self.mat * np.exp(- self.rate * self.mat) * norm.cdf(self.d2())\n\n    def put_rho(self):\n        return self.strike * self.mat * np.exp(- self.rate * self.mat) * norm.cdf(self.d2())\n\n    \"ADD EXOTIC GREEKS?\"\n\n    def get_details(self, kind: str):\n        full_info = {\n            \"Option Price\": round(self.call_price(), 3) if kind == \"call\" else round(self.put_price(), 3),\n            \"Option Delta\": round(self.call_delta(), 3) if kind == \"call\" else round(self.put_delta(), 3),\n            \"Option Gamma\": round(self.call_gamma(), 3) if kind == \"call\" else round(self.put_gamma(), 3),\n            \"Option Vega\": round(self.call_vega(), 3) if kind == \"call\" else round(self.put_vega(), 3),\n            \"Option Theta\": round(self.call_theta(), 3) if kind == \"call\" else round(self.put_theta(), 3),\n            \"Option Rho\": round(self.call_rho(), 3) if kind == \"call\" else round(self.put_rho(), 3)\n        }\n        return full_info","metadata":{"_uuid":"6447e1fe-7caa-4ed8-a7a1-a7c004b83129","_cell_guid":"d5f5dd8d-a59e-48dc-8135-85ada580d518","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2022-09-04T16:23:34.983633Z","iopub.execute_input":"2022-09-04T16:23:34.984056Z","iopub.status.idle":"2022-09-04T16:23:35.005812Z","shell.execute_reply.started":"2022-09-04T16:23:34.984023Z","shell.execute_reply":"2022-09-04T16:23:35.004317Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Main strategies payoff overview","metadata":{"_uuid":"8413f265-777f-4877-b23f-a6fec8d65fb9","_cell_guid":"e226f50a-b104-4b4b-91e1-0f3b4261fa41","trusted":true}},{"cell_type":"code","source":"class Strategies_payoffs(BS_Option_Pricing):\n\n    def __init__(self, market_param: list, closing: float):\n        BS_Option_Pricing.__init__(self, market_param[0], market_param[1], market_param[2], market_param[3],\n                                   market_param[4], market_param[5], market_param[6], market_param[7])\n        self.closing = closing\n\n    def simple_option(self, option_type: str = \"put\", kind: str = \"short\"):\n        premium = BS_Option_Pricing.put_price(self) if option_type == \"put\" else BS_Option_Pricing.call_price(self)\n        multi = -1 if kind == \"short\" else 1\n        payoff = multi * ((max(self.closing - self.strike, 0) if option_type == \"call\" else max(\n            self.strike - self.closing, 0)) - premium)\n        return payoff\n\n    def bull_spread(self, kind: str, market_param2: list):\n        return self.simple_option(kind, \"long\") + \\\n               Strategies_payoffs(market_param2, self.closing).simple_option(kind, \"short\")\n\n    def straddle(self, kind: str = \"short\"):\n        abs_payoff = self.simple_option(\"put\", kind) + self.simple_option(\"call\", kind)\n        return abs_payoff\n\n    def strangle(self, market_param2: list, kind: str = \"short\"):\n        if not (self.strike < market_param2[1]):\n            print(\"Second Option should have strike price lower than first one!\")\n            pass\n        else:\n            product_two = Strategies_payoffs(market_param2, self.closing)\n            abs_payoff = self.simple_option(\"put\", kind) + product_two.simple_option(\"call\", kind)\n            return abs_payoff\n\n    def butterfly(self, market_param2: list, market_param3: list, kind: str = \"short\"):\n        if (self.strike < market_param2[1] < market_param3[1]):\n            option = \"call\"\n        else:\n            option = \"put\"\n\n        product2 = Strategies_payoffs(market_param2, self.closing)\n        product3 = Strategies_payoffs(market_param3, self.closing)\n        if kind == \"long\":\n            abs_payoff = self.simple_option(option, \"long\") + 2 * product2.simple_option(option, \"short\") \\\n                         + product3.simple_option(option, \"long\")\n\n        else:\n            abs_payoff = self.simple_option(option, \"short\") + 2 * product2.simple_option(option, \"long\") \\\n                         + product3.simple_option(option, \"short\")\n        return abs_payoff\n\n    def condor(self, market_param2: list, market_param3: list, market_param4: list, kind: str = \"short\"):\n        if not (self.strike < market_param2[1] < market_param3[1] < market_param4[1]):\n            print(\"We need Strike1 < Strike2 < Strike3 < Strike4\")\n        else:\n            product2 = Strategies_payoffs(market_param2, self.closing)\n            product3 = Strategies_payoffs(market_param3, self.closing)\n            product4 = Strategies_payoffs(market_param4, self.closing)\n            abs_payoff = self.simple_option(\"put\", \"long\") + product2.simple_option(\"put\", \"short\") \\\n                         + product3.simple_option(\"call\", \"short\") + product4.simple_option(\"call\", \"long\")\n\n            return abs_payoff","metadata":{"_uuid":"96223f3c-8563-4856-be17-11de833ef1cc","_cell_guid":"304746ad-99fd-4062-9724-de1366c97f10","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2022-09-04T16:22:47.283850Z","iopub.execute_input":"2022-09-04T16:22:47.284383Z","iopub.status.idle":"2022-09-04T16:22:47.301025Z","shell.execute_reply.started":"2022-09-04T16:22:47.284349Z","shell.execute_reply":"2022-09-04T16:22:47.300009Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# **Try Black-Scholes Class**","metadata":{"_uuid":"1b184d28-c78f-4a9d-a4a2-1666be46cd2c","_cell_guid":"5ab4e87c-7412-42a2-866d-6c610f096311","trusted":true}},{"cell_type":"code","source":"derivatives = Greek(50, 40, 1, 0.05, 0.2, \"call\", \"long\", 0)\nprint(f\"Call Greek: {derivatives.get_details('call')}\")\nprint(f\"Put Greek: {derivatives.get_details('put')}\")","metadata":{"_uuid":"c2710e15-57f6-44bb-aa45-feaa2cf038d7","_cell_guid":"3de6bcdb-5dda-4262-9e54-ca3bc2ecb950","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2022-09-04T16:23:38.416720Z","iopub.execute_input":"2022-09-04T16:23:38.417072Z","iopub.status.idle":"2022-09-04T16:23:38.429197Z","shell.execute_reply.started":"2022-09-04T16:23:38.417043Z","shell.execute_reply":"2022-09-04T16:23:38.428103Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# **Plot Strategies Payoff**","metadata":{"_uuid":"af8da63a-d22e-4ba0-a772-13b7b58bb628","_cell_guid":"d32f9d7b-f48a-4608-bf5e-76c412c398cb","trusted":true}},{"cell_type":"markdown","source":"Product parameters","metadata":{"_uuid":"4ead6099-efd3-4b21-b794-6af4c4b3b90a","_cell_guid":"630b6fb0-3056-42ab-8d8c-07b5792e60d8","trusted":true}},{"cell_type":"code","source":"arr = np.linspace(0, 80, 1000)\n# market_param = [\"Spot\" \"Strike\", \"Maturity\", \"Rate\", \"Volatility\", \"dividend\"]\nmarket_param = [50, 40, 1, 0.05, 0.2, \"call\", \"long\", 0]\nmarket_param2 = [50, 47.5, 1, 0.05, 0.2, \"call\", \"long\", 0]\nmarket_param3 = [50, 52.5, 1, 0.05, 0.2, \"call\", \"long\", 0]\nmarket_param4 = [50, 60, 1, 0.05, 0.2, \"call\", \"long\", 0]\nmarket_param5 = [50, 55, 1, 0.05, 0.2, \"call\", \"long\", 0]","metadata":{"_uuid":"6421cdf4-8513-4772-bd5b-899496ef3d5d","_cell_guid":"59a0a5e4-fe28-4a64-aac4-101abfe63c40","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2022-09-04T16:23:39.240992Z","iopub.execute_input":"2022-09-04T16:23:39.241500Z","iopub.status.idle":"2022-09-04T16:23:39.249362Z","shell.execute_reply.started":"2022-09-04T16:23:39.241474Z","shell.execute_reply":"2022-09-04T16:23:39.247866Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def plot_vanilla(arr, market_param):\n    fig, axs = plt.subplots(2, 2, figsize=(20,10))\n    y = [Strategies_payoffs(market_param, i).simple_option(\"call\", \"long\") for i in arr]\n    y2 = [Strategies_payoffs(market_param, i).simple_option(\"put\", \"long\") for i in arr]\n    y3 = [Strategies_payoffs(market_param, i).simple_option(\"call\", \"short\") for i in arr]\n    y4 = [Strategies_payoffs(market_param, i).simple_option(\"put\", \"short\") for i in arr]\n    fig.suptitle(f\"Vanilla Option Payoff with S0:{market_param[0]} - K: {market_param[1]} - T\"\n                 f\":{market_param[2]} - r:{market_param[3]} - sigma:{market_param[4]}\", fontsize=14)\n    axs[0, 0].plot(arr, y)\n    axs[0, 1].plot(arr, y2)\n    axs[1, 0].plot(arr, y3)\n    axs[1, 1].plot(arr, y4)\n    axs[0, 0].set_title(\"Long Call\")\n    axs[0, 1].set_title(\"Long Put\")\n    axs[1, 0].set_title(\"Short Call\")\n    axs[1, 1].set_title(\"Short Call\")\n    plt.show()\n    \ndef plot_straddle(arr, market_param):\n    fig, axs= plt.subplots(2, 1, figsize=(20, 10))\n    y = [Strategies_payoffs(market_param, i).straddle(\"long\") for i in arr]\n    y2 = [Strategies_payoffs(market_param, i).straddle(\"short\") for i in arr]\n    fig.suptitle(f\"Straddle Strategy Payoff with S0:{market_param[0]} - K: {market_param[1]} - T\"\n             f\":{market_param[2]} - r:{market_param[3]} - sigma:{market_param[4]}\", fontsize=14)\n    axs[0].plot(arr, y)\n    axs[1].plot(arr, y2)\n    axs[0].set_title(\"Long Straddle\")\n    axs[1].set_title(\"Short Straddle\")\n    plt.show()\n    \ndef plot_strangle(arr, market_param, market_param2):\n    fig, axs= plt.subplots(2, 1, figsize=(20, 10))\n    y = [Strategies_payoffs(market_param, i).strangle(market_param2, \"long\") for i in arr]\n    y2 = [Strategies_payoffs(market_param, i).strangle(market_param2, \"short\") for i in arr]\n    fig.suptitle(f\"Strangle Strategy Payoff with S0:{market_param[0]} - K: {market_param[1]} - T\"\n             f\":{market_param[2]} - r:{market_param[3]} - sigma:{market_param[4]}\", fontsize=14)\n    axs[0].plot(arr, y)\n    axs[1].plot(arr, y2)\n    axs[0].set_title(f\"Long Strangle. K2 = {market_param2[1]}\")\n    axs[1].set_title(f\"Short Strangle. K2 = {market_param2[1]}\")\n    plt.show()\n\ndef plot_butterfly(arr, market_param, market_param2, market_param3):\n    fig, axs = plt.subplots(2, 1, figsize=(20, 10))\n    y = [Strategies_payoffs(market_param, i).butterfly(market_param2, market_param3, \"long\") for i in arr]\n    y2 = [Strategies_payoffs(market_param, i).butterfly(market_param2, market_param3, \"short\") for i in arr]\n    fig.suptitle(f\"Butterfly Strategy Payoff with S0:{market_param[0]} - K: {market_param[1]} - T\"\n                 f\":{market_param[2]} - r:{market_param[3]} - sigma:{market_param[4]}\", fontsize=14)\n    axs[0].plot(arr, y)\n    axs[1].plot(arr, y2)\n    axs[0].set_title(f\"Long Butterfly. K2 = {market_param2[1]} - K3 = {market_param3[1]}\")\n    axs[1].set_title(f\"Short Butterly. K2 = {market_param2[1]} - K3 = {market_param3[1]}\")\n    plt.show()\n\ndef plot_condor(arr, market_param, market_param2, market_param3, market_param4):\n    y = [Strategies_payoffs(market_param, i).condor(market_param2, market_param3, market_param4) for i in arr]\n    plt.plot(arr, y)\n    plt.title(f\"Iron Condor. K2 = {market_param2[1]} - K3 = {market_param3[1]} - K4 = {market_param4[1]}\")\n    plt.show()","metadata":{"_uuid":"2afadca8-b4a6-45be-a6b2-1be1bfe3160c","_cell_guid":"7e713b1a-d44d-4d1a-b782-2cd3bd092bd8","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2022-09-04T16:23:39.396790Z","iopub.execute_input":"2022-09-04T16:23:39.398120Z","iopub.status.idle":"2022-09-04T16:23:39.415609Z","shell.execute_reply.started":"2022-09-04T16:23:39.398054Z","shell.execute_reply":"2022-09-04T16:23:39.414920Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plot_vanilla(arr, market_param)","metadata":{"_uuid":"554d6f24-3e78-485b-b5aa-650314eb163c","_cell_guid":"f97e767e-b392-4870-86d8-df51ac0a0f43","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2022-09-04T16:23:39.516704Z","iopub.execute_input":"2022-09-04T16:23:39.517261Z","iopub.status.idle":"2022-09-04T16:23:40.793648Z","shell.execute_reply.started":"2022-09-04T16:23:39.517222Z","shell.execute_reply":"2022-09-04T16:23:40.792543Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plot_straddle(arr, market_param)","metadata":{"_uuid":"547ba39a-31d2-46a3-b9d6-184f29d94520","_cell_guid":"7055443b-3db1-406b-adc9-5ef61bd33d30","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2022-09-04T16:23:40.795550Z","iopub.execute_input":"2022-09-04T16:23:40.795858Z","iopub.status.idle":"2022-09-04T16:23:41.923995Z","shell.execute_reply.started":"2022-09-04T16:23:40.795825Z","shell.execute_reply":"2022-09-04T16:23:41.922615Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plot_strangle(arr, market_param, market_param2)","metadata":{"_uuid":"c8404760-fb62-4865-8fdd-3d1749a68248","_cell_guid":"cf81007d-1c98-45ad-9ae3-c96e51f3f203","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2022-09-04T16:23:41.925134Z","iopub.execute_input":"2022-09-04T16:23:41.925369Z","iopub.status.idle":"2022-09-04T16:23:43.003437Z","shell.execute_reply.started":"2022-09-04T16:23:41.925344Z","shell.execute_reply":"2022-09-04T16:23:43.002161Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plot_butterfly(arr, market_param, market_param2, market_param5)","metadata":{"_uuid":"681e6875-d51e-431a-ac13-e13ab90786d3","_cell_guid":"bb1c2d1c-7b4c-42f4-bb83-6745413a0a3d","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2022-09-04T16:23:43.005648Z","iopub.execute_input":"2022-09-04T16:23:43.005930Z","iopub.status.idle":"2022-09-04T16:23:44.537193Z","shell.execute_reply.started":"2022-09-04T16:23:43.005905Z","shell.execute_reply":"2022-09-04T16:23:44.536125Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plot_condor(arr, market_param, market_param2, market_param3, market_param4)","metadata":{"_uuid":"5cca38c9-3640-423f-931d-a41bb127e60b","_cell_guid":"eb921310-7e13-4a42-9f35-7c19c724b128","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2022-09-04T16:23:44.538349Z","iopub.execute_input":"2022-09-04T16:23:44.538655Z","iopub.status.idle":"2022-09-04T16:23:45.423611Z","shell.execute_reply.started":"2022-09-04T16:23:44.538629Z","shell.execute_reply":"2022-09-04T16:23:45.421892Z"},"trusted":true},"execution_count":null,"outputs":[]}]}